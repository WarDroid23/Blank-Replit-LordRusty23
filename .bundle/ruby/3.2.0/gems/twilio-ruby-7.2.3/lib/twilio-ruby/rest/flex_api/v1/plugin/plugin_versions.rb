##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Flex
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Twilio
    module REST
        class FlexApi < FlexApiBase
            class V1 < Version
                class PluginContext < InstanceContext

                     class PluginVersionsList < ListResource
                
                    ##
                    # Initialize the PluginVersionsList
                    # @param [Version] version Version that contains the resource
                    # @return [PluginVersionsList] PluginVersionsList
                    def initialize(version, plugin_sid: nil)
                        super(version)
                        # Path Solution
                        @solution = { plugin_sid: plugin_sid }
                        @uri = "/PluginService/Plugins/#{@solution[:plugin_sid]}/Versions"
                        
                    end
                    ##
                    # Create the PluginVersionsInstance
                    # @param [String] version The Flex Plugin Version's version.
                    # @param [String] plugin_url The URL of the Flex Plugin Version bundle
                    # @param [String] changelog The changelog of the Flex Plugin Version.
                    # @param [Boolean] private Whether this Flex Plugin Version requires authorization.
                    # @param [String] cli_version The version of Flex Plugins CLI used to create this plugin
                    # @param [String] validate_status The validation status of the plugin, indicating whether it has been validated
                    # @param [String] flex_metadata The Flex-Metadata HTTP request header
                    # @return [PluginVersionsInstance] Created PluginVersionsInstance
                    def create(
                        version: nil, 
                        plugin_url: nil, 
                        changelog: :unset, 
                        private: :unset, 
                        cli_version: :unset, 
                        validate_status: :unset, 
                        flex_metadata: :unset
                    )

                        data = Twilio::Values.of({
                            'Version' => version,
                            'PluginUrl' => plugin_url,
                            'Changelog' => changelog,
                            'Private' => private,
                            'CliVersion' => cli_version,
                            'ValidateStatus' => validate_status,
                        })

                        headers = Twilio::Values.of({'Content-Type' => 'application/x-www-form-urlencoded', 'Flex-Metadata' => flex_metadata, })
                        
                        payload = @version.create('POST', @uri, data: data, headers: headers)
                        PluginVersionsInstance.new(
                            @version,
                            payload,
                            plugin_sid: @solution[:plugin_sid],
                        )
                    end

                
                    ##
                    # Lists PluginVersionsInstance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    # @param [String] flex_metadata The Flex-Metadata HTTP request header
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Array] Array of up to limit results
                    def list(flex_metadata: :unset, limit: nil, page_size: nil)
                        self.stream(
                            flex_metadata: flex_metadata,
                            limit: limit,
                            page_size: page_size
                        ).entries
                    end

                    ##
                    # Streams Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    # @param [String] flex_metadata The Flex-Metadata HTTP request header
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream(flex_metadata: :unset, limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(
                            flex_metadata: flex_metadata,
                            page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields PluginVersionsInstance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of PluginVersionsInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] flex_metadata The Flex-Metadata HTTP request header
                    # @param [String] page_token PageToken provided by the API
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 50
                    # @return [Page] Page of PluginVersionsInstance
                    def page(flex_metadata: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
                        params = Twilio::Values.of({
                            'Flex-Metadata' => flex_metadata,
                            'PageToken' => page_token,
                            'Page' => page_number,
                            'PageSize' => page_size,
                        })

                        response = @version.page('GET', @uri, params: params)

                        PluginVersionsPage.new(@version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of PluginVersionsInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of PluginVersionsInstance
                    def get_page(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    PluginVersionsPage.new(@version, response, @solution)
                    end
                    


                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.FlexApi.V1.PluginVersionsList>'
                    end
                end


                class PluginVersionsContext < InstanceContext
                    ##
                    # Initialize the PluginVersionsContext
                    # @param [Version] version Version that contains the resource
                    # @param [String] plugin_sid The SID of the Flex Plugin the resource to belongs to.
                    # @param [String] sid The SID of the Flex Plugin Version resource to fetch.
                    # @return [PluginVersionsContext] PluginVersionsContext
                    def initialize(version, plugin_sid, sid)
                        super(version)

                        # Path Solution
                        @solution = { plugin_sid: plugin_sid, sid: sid,  }
                        @uri = "/PluginService/Plugins/#{@solution[:plugin_sid]}/Versions/#{@solution[:sid]}"

                        
                    end
                    ##
                    # Fetch the PluginVersionsInstance
                    # @param [String] flex_metadata The Flex-Metadata HTTP request header
                    # @return [PluginVersionsInstance] Fetched PluginVersionsInstance
                    def fetch(
                        flex_metadata: :unset
                    )

                        headers = Twilio::Values.of({'Content-Type' => 'application/x-www-form-urlencoded', 'Flex-Metadata' => flex_metadata, })
                        
                        payload = @version.fetch('GET', @uri, headers: headers)
                        PluginVersionsInstance.new(
                            @version,
                            payload,
                            plugin_sid: @solution[:plugin_sid],
                            sid: @solution[:sid],
                        )
                    end


                    ##
                    # Provide a user friendly representation
                    def to_s
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.FlexApi.V1.PluginVersionsContext #{context}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.FlexApi.V1.PluginVersionsContext #{context}>"
                    end
                end

                class PluginVersionsPage < Page
                    ##
                    # Initialize the PluginVersionsPage
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [PluginVersionsPage] PluginVersionsPage
                    def initialize(version, response, solution)
                        super(version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of PluginVersionsInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [PluginVersionsInstance] PluginVersionsInstance
                    def get_instance(payload)
                        PluginVersionsInstance.new(@version, payload, plugin_sid: @solution[:plugin_sid])
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Twilio.FlexApi.V1.PluginVersionsPage>'
                    end
                end
                class PluginVersionsInstance < InstanceResource
                    ##
                    # Initialize the PluginVersionsInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Twilio
                    # @param [String] account_sid The SID of the
                    #   {Account}[https://www.twilio.com/docs/iam/api/account] that created this PluginVersions
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [PluginVersionsInstance] PluginVersionsInstance
                    def initialize(version, payload , plugin_sid: nil, sid: nil)
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'sid' => payload['sid'],
                            'plugin_sid' => payload['plugin_sid'],
                            'account_sid' => payload['account_sid'],
                            'version' => payload['version'],
                            'plugin_url' => payload['plugin_url'],
                            'changelog' => payload['changelog'],
                            'private' => payload['private'],
                            'archived' => payload['archived'],
                            'validated' => payload['validated'],
                            'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                            'url' => payload['url'],
                        }

                        # Context
                        @instance_context = nil
                        @params = { 'plugin_sid' => plugin_sid  || @properties['plugin_sid']  ,'sid' => sid  || @properties['sid']  , }
                    end

                    ##
                    # Generate an instance context for the instance, the context is capable of
                    # performing various actions.  All instance actions are proxied to the context
                    # @return [PluginVersionsContext] CallContext for this CallInstance
                    def context
                        unless @instance_context
                            @instance_context = PluginVersionsContext.new(@version , @params['plugin_sid'], @params['sid'])
                        end
                        @instance_context
                    end
                    
                    ##
                    # @return [String] The unique string that we created to identify the Flex Plugin Version resource.
                    def sid
                        @properties['sid']
                    end
                    
                    ##
                    # @return [String] The SID of the Flex Plugin resource this Flex Plugin Version belongs to.
                    def plugin_sid
                        @properties['plugin_sid']
                    end
                    
                    ##
                    # @return [String] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Plugin Version resource and owns this resource.
                    def account_sid
                        @properties['account_sid']
                    end
                    
                    ##
                    # @return [String] The unique version of this Flex Plugin Version.
                    def version
                        @properties['version']
                    end
                    
                    ##
                    # @return [String] The URL of where the Flex Plugin Version JavaScript bundle is hosted on.
                    def plugin_url
                        @properties['plugin_url']
                    end
                    
                    ##
                    # @return [String] A changelog that describes the changes this Flex Plugin Version brings.
                    def changelog
                        @properties['changelog']
                    end
                    
                    ##
                    # @return [Boolean] Whether the Flex Plugin Version is validated. The default value is false.
                    def private
                        @properties['private']
                    end
                    
                    ##
                    # @return [Boolean] Whether the Flex Plugin Version is archived. The default value is false.
                    def archived
                        @properties['archived']
                    end
                    
                    ##
                    # @return [Boolean] 
                    def validated
                        @properties['validated']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT when the Flex Plugin Version was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def date_created
                        @properties['date_created']
                    end
                    
                    ##
                    # @return [String] The absolute URL of the Flex Plugin Version resource.
                    def url
                        @properties['url']
                    end
                    
                    ##
                    # Fetch the PluginVersionsInstance
                    # @param [String] flex_metadata The Flex-Metadata HTTP request header
                    # @return [PluginVersionsInstance] Fetched PluginVersionsInstance
                    def fetch(
                        flex_metadata: :unset
                    )

                        context.fetch(
                            flex_metadata: flex_metadata, 
                        )
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.FlexApi.V1.PluginVersionsInstance #{values}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.FlexApi.V1.PluginVersionsInstance #{values}>"
                    end
                end

             end
            end
        end
    end
end


