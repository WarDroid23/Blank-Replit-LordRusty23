{"version":3,"file":"index.mjs","sources":["../src/index.js"],"sourcesContent":["import { spawn } from 'child_process'\nimport debug from 'debug'\nimport { lstat, symlink, unlink, writeFile } from 'fs/promises'\nimport { join } from 'path'\n\nconst exists = file => lstat(file).then(() => true, () => false)\nlet log = debug('linkbe')\nconst { platform } = process\nconst windows = platform === 'win32'\n\nasync function findExeOnRun(name, scriptDirectory) {\n  /* c8 ignore next 5 */\n  const exe = join(scriptDirectory, '..', windows ? `${name}.exe` : name)\n  if (!await exists(exe)) {\n    log('exe \"%s\"', exe)\n    throw new Error('missing executable')\n  }\n  return exe\n}\n\nfunction runExe(exe) {\n  const [,, ...args] = process.argv\n  log('run \"%s\" with %d args', exe, args.length)\n  return new Promise((resolve, reject) =>\n    spawn(exe, args, { stdio: 'inherit' })\n      .on('error', reject)\n      /* c8 ignore next */\n      .on('exit', code => code ? reject(code) : resolve())\n  )\n}\n\nasync function findBinOnRun(scriptDirectory) {\n  // installed locally\n  let bin = join(scriptDirectory, '..', '..', '.bin')\n  log('local bin \"%s\"', bin)\n  // installed globally\n  if (!await exists(bin)) {\n    bin = join(scriptDirectory, '..', '..', '..', '..', 'bin')\n    log('global bin \"%s\"', bin)\n    // installed dependencies of this package\n    if (!await exists(bin)) {\n      bin = join(scriptDirectory, '..', 'node_modules', '.bin')\n      log('package bin \"%s\"', bin)\n    }\n    /* c8 ignore next */\n    if (!await exists(bin)) throw new Error('cannot find bin directory')\n  }\n  return bin\n}\n\nasync function replaceSymlink(bin, name, exe) {\n  const link = join(bin, name)\n  log('stat \"%s\"', link)\n  const { mode } = await lstat(link)\n  if (mode & 0o222) {\n    log('unlink \"%s\"', link)\n    await unlink(link)\n    log('link \"%s\"', link)\n    await symlink(exe, link)\n    return true\n  /* c8 ignore next 3 */\n  } else {\n    log('\"%s\" not writable', link)\n  }\n}\n\n/* c8 ignore next 45 */\n\nasync function replaceCmd(bin, name, exe) {\n  const cmd = join(bin, `${name}.cmd`)\n  log('stat \"%s\"', cmd)\n  const { mode } = await lstat(cmd)\n  if (mode & 0o222) {\n    log('unlink \"%s\"', cmd)\n    await unlink(cmd)\n    log('write \"%s\"', cmd)\n    await writeFile(cmd, `\"${exe}\" %*`)\n    return true\n  } else {\n    log('\"%s\" not writable', cmd)\n  }\n}\n\nasync function replacePs(bin, name, exe) {\n  const ps = join(bin, `${name}.ps1`)\n  log('stat \"%s\"', ps)\n  const { mode } = await lstat(ps)\n  if (mode & 0o222) {\n    log('unlink \"%s\"', ps)\n    await unlink(ps)\n    log('write \"%s\"', ps)\n    await writeFile(ps, `#!/usr/bin/env pwsh\nif ($MyInvocation.ExpectingInput) {\n  $input | & \"${exe}\" $args\n} else {\n  & \"${exe}\" $args\n}\nexit $LASTEXITCODE`)\n    return true\n  } else {\n    log('\"%s\" not writable', ps)\n  }\n}\n\nfunction replaceCmdAndPs(bin, name, exe) {\n  return Promise.all([\n    replaceCmd(bin, name, exe),\n    replacePs(bin, name, exe)\n  ])\n}\n\nconst replaceLink = windows ? replaceCmdAndPs : replaceSymlink\n\nfunction replaceLinks(bin, linkNames, exe) {\n  return Promise.all(linkNames.map(name => replaceLink(bin, name, exe)))\n}\n\nexport async function runAndReplaceLink({ name, linkNames, executable, scriptDirectory, verbose }) {\n  if (verbose) log = console.log.bind(console)\n  if (!executable) executable = await findExeOnRun(name, scriptDirectory)\n  const bin = await findBinOnRun(scriptDirectory)\n  if (!linkNames) linkNames = [name]\n  await replaceLinks(bin, linkNames, executable)\n  await runExe(executable)\n}\n\nexport function reportError(err) {\n  let code\n  if (typeof err !== 'number') {\n    console.error(err)\n    code = 1\n  } else {\n    code = err\n  }\n  process.exitCode = code\n}\n\nasync function findBinOnInstall(scriptDirectory) {\n  /* c8 ignore next */\n  if (!process.env.INIT_CWD) throw new Error('not running during npm install')\n\n  // installed locally\n  let bin = join(scriptDirectory, '..', '.bin')\n  log('local bin \"%s\"', bin)\n  // installed globally\n  if (!await exists(bin)) {\n    bin = join(scriptDirectory, '..', '..', 'bin')\n    log('global bin \"%s\"', bin)\n    // installed dependencies of this package\n    if (!await exists(bin)) {\n      bin = join(scriptDirectory, 'node_modules', '.bin')\n      log('package bin \"%s\"', bin)\n    }\n    /* c8 ignore next */\n    if (!await exists(bin)) throw new Error('cannot find bin directory')\n  }\n  return bin\n}\n\nasync function findExeOnInstall(name, packageDirectory) {\n  /* c8 ignore next 5 */\n  const exe = join(packageDirectory, windows ? `${name}.exe` : name)\n  if (!await exists(exe)) {\n    log('exe \"%s\"', exe)\n    throw new Error('missing executable')\n  }\n  return exe\n}\n\nasync function makeSymlink(bin, name, exe) {\n  const link = join(bin, name)\n  if (await exists(link)) {\n    log('unlink \"%s\"', link)\n    await unlink(link)\n  }\n  log('link \"%s\"', link)\n  await symlink(exe, link)\n}\n\n/* c8 ignore next 35 */\n\nasync function makeCmd(bin, name, exe) {\n  const cmd = join(bin, `${name}.cmd`)\n  if (await exists(cmd)) {\n    log('unlink \"%s\"', cmd)\n    await unlink(cmd)\n  }\n  log('write \"%s\"', cmd)\n  await writeFile(cmd, `\"${exe}\" %*`)\n}\n\nasync function makePs(bin, name, exe) {\n  const ps = join(bin, `${name}.ps1`)\n  if (await exists(ps)) {\n    log('unlink \"%s\"', ps)\n    await unlink(ps)\n  }\n  log('write \"%s\"', ps)\n  await writeFile(ps, `#!/usr/bin/env pwsh\nif ($MyInvocation.ExpectingInput) {\n  $input | & \"${exe}\" $args\n} else {\n  & \"${exe}\" $args\n}\nexit $LASTEXITCODE`)\n}\n\nfunction makeCmdAndPs(bin, name, exe) {\n  return Promise.all([\n    makeCmd(bin, name, exe),\n    makePs(bin, name, exe)\n  ])\n}\n\nconst makeLink = windows ? makeCmdAndPs : makeSymlink\n\nfunction makeLinks(bin, linkNames, exe) {\n  return Promise.all(linkNames.map(name => makeLink(bin, name, exe)))\n}\n\nexport async function installLink({ name, linkNames, executable, packageDirectory, verbose }) {\n  if (verbose) log = console.log.bind(console)\n  if (!executable) executable = await findExeOnInstall(name, packageDirectory)\n  const bin = await findBinOnInstall(packageDirectory)\n  if (!linkNames) linkNames = [name]\n  await makeLinks(bin, linkNames, executable)\n}\n"],"names":[],"mappings":"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"}